plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
}

group 'com.mcreater'
version '1.0-SNAPSHOT'

repositories {
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://mvnrepository.com/artifact/' }
    maven { url 'https://jitpack.io/' }
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = "8"
targetCompatibility = "8"

tasks.withType(JavaCompile) {
    options.encoding = "utf-8"
}
tasks.withType(Javadoc) {
    options.encoding = "utf-8"
}

application {
    mainModule = 'com.mcreater.amcl'
    mainClass = 'com.mcreater.amcl.JavaFXApplication'
}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation(getJavaVersion() > 8 ? 'com.jfoenix:jfoenix:9.0.10' : 'com.jfoenix:jfoenix:8.0.10')
    implementation('com.google.code.gson:gson:2.9.0')
    implementation('com.alibaba:fastjson:2.0.3')
    implementation('org.apache.logging.log4j:log4j-core:2.17.2')
    implementation('org.apache.logging.log4j:log4j-api:2.17.2')
    implementation('net.java.dev.jna:jna:5.12.1')
    implementation('net.java.dev.jna:jna-platform:5.12.1')
    implementation('com.github.jnr:jnr-posix:3.1.15')
    implementation('com.github.oshi:oshi-core:6.2.2')
    implementation('org.apache.commons:commons-lang3:3.5')
    implementation('org.nanohttpd:nanohttpd:2.3.1')
    implementation('org.fusesource.jansi:jansi:2.4.0')
    implementation('org.apache.httpcomponents:httpclient:4.5.13')
    implementation('org.apache.httpcomponents:httpcore:4.4.1')
    implementation('org.apache.httpcomponents:httpmime:4.4.1')
    implementation('com.formdev:flatlaf:2.4')
    implementation('com.moandjiezana.toml:toml4j:0.7.2')
}

int getJavaVersion() {
    int version = 0
    String[] ful = System.getProperty("java.runtime.version").split("\\.");
    if (Integer.parseInt(ful[0]) == 1){
        version = Integer.parseInt(ful[1]);
    }
    else {
        version = Integer.parseInt(ful[0]);
    }
    return version
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}